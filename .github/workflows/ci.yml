name: C++ CI

on:
  push:
  pull_request:

jobs:
  build_and_test:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        build_type: [Release]

    name: ${{ matrix.os }} / ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    env:
      SOURCE_DIR: BlokchainSim/BlokchainSim   # <- your nested CMakeLists

    steps:
    # -----------------------------------------------------------------------
    # 1) Checkout
    # -----------------------------------------------------------------------
    - uses: actions/checkout@v4

    # -----------------------------------------------------------------------
    # 2) Dependencies
    # -----------------------------------------------------------------------
    - name: Install Ubuntu packages
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build libssl-dev qt6-base-dev

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    # ---- Qt for Windows: use official install-qt-action -------------------
    - name: Install Qt (Windows)
      if: runner.os == 'Windows'
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.6.2           # or 6.7.0 etc.
        arch: win64_msvc2019_64  # matches MSVC toolset
        cache: true              # speeds up subsequent builds

    # install-qt-action sets Qt6_DIR and adds Qt to PATH automatically
    # -----------------------------------------------------------------------
    # 3) Configure
    # -----------------------------------------------------------------------
    - name: Configure CMake
      run: |
        cmake -S "$SOURCE_DIR" -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      shell: bash

    # -----------------------------------------------------------------------
    # 4) Build
    # -----------------------------------------------------------------------
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}
      shell: bash

    # -----------------------------------------------------------------------
    # 5) Test
    # -----------------------------------------------------------------------
    - name: Run unit tests
      run: ctest --test-dir build -C ${{ matrix.build_type }} --output-on-failure
      shell: bash
